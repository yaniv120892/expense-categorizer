# Expense Categorization API

## 📌 Overview
This project is a **machine learning-based API** that automatically categorizes expense descriptions into predefined categories. It uses **TF-IDF + Logistic Regression** for text classification and supports **Hebrew to English translation** for better accuracy.

---

## 🚀 Features
✅ **Classifies expenses** based on descriptions.  
✅ **Supports Hebrew and English input** (translates Hebrew to English before prediction).  
✅ **REST API built with FastAPI**.  
✅ **Machine learning model trained on expense data**.  
✅ **Logs every request and prediction**.  
✅ **Health check endpoint (`/ping`)**.  

---

## 📂 Project Structure
```
expense-categorizer/
│── data/                 # Folder for dataset
│   ├── exported.csv      # Original dataset (Hebrew descriptions)
│   ├── exported_translated.csv # Translated dataset (English descriptions)
│── models/               # Folder for trained models
│   ├── expense_categorizer.pkl
│   ├── vectorizer.pkl
│   ├── label_encoder.pkl
│── venv/                 # Virtual environment
│── train.py              # Model training script
│── api.py                # FastAPI server for predictions
│── requirements.txt       # Python dependencies
│── README.md             # Project documentation
```

---

### 1 Set Up a Virtual Environment**
```bash
python -m venv venv
source venv/bin/activate
```

### **2 Install Dependencies**
```bash
pip install -r requirements.txt
```

---

## 📊 Train the Model
```bash
python train.py
```
✅ This will train the model and save it in the `models/` folder.  
✅ It will also display a **histogram of category distribution** to check for imbalances.

---

## 🌍 Start the API Server
```bash
uvicorn api:app --reload
```
API will be available at:  
📍 `http://127.0.0.1:8000`

### **🛠 Health Check**
```bash
curl http://127.0.0.1:8000/ping
```
**Expected Response:**
```json
{"status": "alive"}
```

---

## 🎯 API Endpoints
### **🔹 Predict Expense Category**
#### **Request**
```bash
curl -X POST "http://127.0.0.1:8000/predict" \
     -H "Content-Type: application/json" \
     -d '{"description": "קניתי אוכל בסופר"}'
```

#### **Response**
```json
{
  "category": "Groceries",
  "translated_description": "I bought food at the supermarket"
}
```

